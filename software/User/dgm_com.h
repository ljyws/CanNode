#ifndef _DGMCOMM__H
#define _DGMCOMM__H

#include "main.h"


#define DGM_BOARD_BASEID			0x0003
// CMD
#define CMD_MENU				  		0x1B	// Esc
#define CMD_MOTOR   			    'm'
#define CMD_CALIBRATION		    'c'
#define CMD_ANTICOGGING		    'a'
#define CMD_UPDATE_CONFIGS		'u'
#define CMD_RESET_ERROR			  'z'
#define CMD_DEBUG_Q				    'q'
#define CMD_DEBUG_W				    'w'
#define CMD_UART_SETUP 			  's'



typedef enum eDGMCanCmd{
	DGM_CMD_MOTOR_DISABLE = 0,
	DGM_CMD_MOTOR_ENABLE,
	
	DGM_CMD_ERROR_REPORT,
	DGM_CMD_ERROR_RESET,
	
	DGM_CMD_GET_STAT,
	
	DGM_CMD_CALIBRATION_START,
	DGM_CMD_CALIBRATION_REPORT,
	DGM_CMD_CALIBRATION_ABORT,
	
	DGM_CMD_ANTICOGGING_START,
	DGM_CMD_ANTICOGGING_REPORT,
	DGM_CMD_ANTICOGGING_ABORT,
	
	DGM_CMD_SYNC,
	
	DGM_CMD_SET_TARGET_POSITION,
	DGM_CMD_SET_TARGET_VELOCITY,
	DGM_CMD_SET_TARGET_CURRENT,
	
	DGM_CMD_GET_POSITION,
	DGM_CMD_GET_VELOCITY,
	DGM_CMD_GET_CURRENT,
	DGM_CMD_GET_VBUS,
	DGM_CMD_GET_IBUS,
	
	DGM_CMD_SET_CONFIG,
	DGM_CMD_GET_CONFIG,
	DGM_CMD_UPDATE_CONFIGS,
	DGM_CMD_RESET_ALL_CONFIGS,
	
	DGM_CMD_GET_FW_VERSION,
	
	DGM_CMD_HEARTBEAT,
}tCanCmd;

typedef enum eCanConfigs{
	DGM_CONFIG_MOTOR_POLE_PAIRS = 1,
	DGM_CONFIG_MOTOR_PHASE_RESISTANCE,
	DGM_CONFIG_MOTOR_PHASE_INDUCTANCE,
	DGM_CONFIG_INERTIA,
	
	DGM_CONFIG_CALIB_VALID,
	DGM_CONFIG_CALIB_CURRENT,
	DGM_CONFIG_CALIB_MAX_VOLTAGE,
	
	DGM_CONFIG_ANTICOGGING_ENABLE,
	DGM_CONFIG_ANTICOGGING_POS_THRESHOLD,
	DGM_CONFIG_ANTICOGGING_VEL_THRESHOLD,
	
	DGM_CONFIG_CONTROL_MODE,
	DGM_CONFIG_CURRENT_RAMP_RATE,
	DGM_CONFIG_VEL_RAMP_RATE,
	DGM_CONFIG_TRAJ_VEL,
	DGM_CONFIG_TRAJ_ACCEL,
	DGM_CONFIG_TRAJ_DECEL,
	DGM_CONFIG_POS_GAIN,
	DGM_CONFIG_VEL_GAIN,
	DGM_CONFIG_VEL_INTEGRATOR_GAIN,
	DGM_CONFIG_VEL_LIMIT,
	DGM_CONFIG_CURRENT_LIMIT,
	DGM_CONFIG_CURRENT_CTRL_P_GAIN,
	DGM_CONFIG_CURRENT_CTRL_I_GAIN,
	DGM_CONFIG_CURRENT_CTRL_BW,
	
	DGM_CONFIG_PROTECT_UNDER_VOLTAGE,
	DGM_CONFIG_PROTECT_OVER_VOLTAGE,
	DGM_CONFIG_PROTECT_OVER_SPEED,
	
	DGM_CONFIG_CAN_ID,
	DGM_CONFIG_CAN_TIMEOUT_MS,
	DGM_CONFIG_CAN_SYNC_TARGET_ENABLE,
} tDGMConfigs;

typedef struct {
	tCanCmd dgmCmd;
	uint32_t can_id;
	uint8_t can_dlc;
	uint8_t data[8];
	int dgm_isOK;
} DGMCanFrame;


void Dgm_Motor_ON(DGMCanFrame *dgmCanFrame);
static inline void int_to_data(int val, uint8_t *data);
static inline int data_to_int(uint8_t *data);
static inline void float_to_data(float val, uint8_t *data);
static inline float data_to_float(uint8_t *data);
void DgmSetMotorVel(float vel);
void DGMMotorCtrl(void);
#endif


